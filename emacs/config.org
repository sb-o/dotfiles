#+title: Emacs Configuration
#+startup: overview
#+property: header-args :results none

* Getting Started
** Installing Emacs
On macOS, Homebrew recommends installing the cask version. This is a prebuilt package from emacsformacosx.com, built on Apple's Cocoa framework. If you don't use the cask version, it installs an older version with fewer features.

brew update
brew install --cask emacs

** Setting up configuration folder
By default, the configuration folder is $HOME/.emacs.d. And the configuration file is init.el.

** Load in system-specific files (local.el)
Each computer I use may have its files structured differently. Therefore, I create a separate local.el file which sets some variables used in this file, which can be modified to be specific to the system. Defaults for these variables are defined below.

#+begin_src emacs-lisp
                                          ; Load in system-specific variables
  (let ((file "~/.emacs.d/local.el"))
    (when (file-exists-p file)
      (load file)))
  (defun check-variables-set (variable-list)
    "Check if variables in VARIABLE-LIST are set and print a warning if not."
    (dolist (var variable-list)
      (unless (boundp var)
        (message "Warning: Variable `%s' is not set" var))))

  (check-variables-set '(sb-org-default-file sb-org-agenda-files sb-org-archive-file sb-org-roam-directory sb-org-roam-rootfile))


#+end_src

** Roam.bib
Org-roam uses a bibliography file that syncs with Zotero, called Roam.bib. This should be stored with the Roam files.

** Initial buffer choice
Open sb-org-default-file on startup
#+begin_src emacs-lisp
  (setq initial-buffer-choice sb-org-default-file)
#+end_src

* Installing the Configuration 
** Package manager
To install third party packages, you need to load the 'package' library into your configuration with (require 'package), and give it the URLs for repositories it can use.

The use-package macro makes it much simpler to define, install and load packages from within an Emacs configuration.

It allows you to specify a package that you require and call commands or set bindings when it initialises.

You install this with (package-install 'use-package) if not currently installed. Then all future packages can simply use the 'use-package' syntax.

Below, we also require bind-key, which provides a more convenient way to set keybindings in here.

#+begin_src emacs-lisp
  ;; PACKAGE MANAGER
  (require 'package)
  (setq package-archives '(
      ("gnu"   . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      ("org" . "https://orgmode.org/elpa/")
  ))
  (package-initialize) 
  (unless package-archive-contents
      (package-refresh-contents))
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (require 'bind-key) 
#+end_src

** Allow this code to be tangled into init.el 
To load the code in this document into Emacs, you add the line (org-babel-load-file (expand-file-name ".emacs.d/Emacs.org")) into the init.el file.

When it loads, it will tangle all the code in this file into the configuration.

For simplicity, I'm also moving custom-set-variables and custom-set-faces into a separate file, as they are modified automatically. The code below does this. 

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (unless (file-exists-p custom-file)
    (with-temp-buffer
      (write-file custom-file)))
  (load custom-file)
#+end_src

** Basic settings
There are a number of basic settings we want in place immediately, to make the user experience less annoying.

1. Disable the bell.
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

2. Get rid of the start screen, initial scratch message, menu bar, and if it's a GUI version of Emacs, get rid of the toolbar, scrollbar and tooltips. 

There are some differences in how you configure this in emacsclient (when you have a daemon running in the background) versus normal GUI emacs versus terminal emacs. The below seems to avoid errors.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)

  ; To disable menu bar
  (menu-bar-mode -1)

  ; To disable on emacsclient
  (setq tool-bar-mode nil)
  (setq scroll-bar-mode nil)
  (setq tooltip-mode nil)

  ; To disable on emacs GUI
  (if (or (display-graphic-p) window-system)
  (progn (tool-bar-mode -1) (scroll-bar-mode -1) (tooltip-mode -1))
  )
#+end_src

3. Move all of the backup and autosave files to the temp directory, so they don't clutter up the folder you're working in. You can check what the temporary-file-directory is using M-x describe-variable.
#+begin_src emacs-lisp
  (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
#+end_src


4. Don't warn if visiting symbolic file under version control, just visit the real file. Emacs warns you that visiting a symbolic link to a file under version control bypasses the version control system.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

5. "y" or "n", not "yes" or "no"
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

6. Ctrl-S should save files, as I press it out of habit.
#+begin_src emacs-lisp
 (global-set-key (kbd "C-s") 'save-buffer)
#+end_src

7. Words should wrap if they are too long.
#+begin_src emacs-lisp
  (global-visual-line-mode t) 
#+end_src

8. Rebind C-x f to find file (as well as C-x C-f), instead of set fill column
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x f"))
  (global-set-key (kbd "C-x f") 'find-file)
#+end_src

9. Make the window slightly larger when it starts up
#+begin_src emacs-lisp
 (when window-system
  (set-frame-size (selected-frame) 100 60))
#+end_src

* Evil Mode
Evil mode is a vi layer for Emacs, allowing you to use vim bindings.

There are some configuration steps we need to take to ensure Evil mode works seamlessly across Emacs. This includes:

- Installing evil-collection, which includes keybindings for parts of Emacs that are not covered by default, such as help-mode, calendar and eshell. This requires evil-want-keybinding to be set to nil before evil loads.

- Installing evil-org, to ensure evil mode keybindings work in org-mode (e.g. org agenda, org calendar, tables).

- Running Emacs with Evil mode in a terminal breaks the tab key for cycling through header visibility in Org mode. Terminals usually map Tab and C-i to U+0009 (Character Tabulation) for historical reasons, so they are recognised as the same key press. Evil remaps C-i to evil-jump-forward, which overrides the default mapping for org mode's Tab. This sacrifices the C-i backward jumping by turning it off on terminal. It has to be set before Evil mode is loaded. I am just disabling it regardless of terminal/GUI for ease, until I can find a better solution.
  
- evil-want-fine-undo needs to be set to true, to stop 'undo' from deleting whole paragraphs. Instead, undo steps are determined according to Emacs heuristics. 
  
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-C-i-jump nil)
    (setq evil-want-keybinding nil) 
    (setq evil-want-fine-undo t) 
    :config
    (evil-mode 1)
    )
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    )
  (use-package evil-org
    :after (org evil-collection)
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    )
#+end_src

* Theme, Modeline and Which Key
** Theme
Using built-in deeper blue theme, with minor customisations.

#+begin_src emacs-lisp
  (load-theme 'deeper-blue)

  ; Improve readability
  (set-face-attribute 'default nil :height 150) ; Set font
  (setq-default line-spacing 0.25) ; Set line spacing

  ; Fixes
  (set-face-attribute 'default nil :foreground "white") ; lighter text
  (set-face-attribute 'shadow nil :foreground "grey90") ; lighter text
  (set-face-attribute 'org-ellipsis nil :foreground "yellow" :underline nil) ; Don't underline ellipsis
  (set-face-attribute 'mode-line nil :background "blue25" :foreground "white")
  (set-face-attribute 'mode-line-inactive nil :background "gray50")
  (set-face-attribute 'mode-line-buffer-id nil :foreground "SkyBlue1")

  ; Org outline tweaks
  (set-face-attribute 'outline-1 nil :height 155)
#+end_src

** Modeline
Doom Modeline creates a cleaner modeline at the bottom. It's used in Doom Emacs and Spacemacs.

For the icons to work, you need to have Nerd Fonts to be installed on your system. You can easily do this with M-x nerd-icons-install-fonts, and it installs to your systems fonts folder.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src


** Which Key
This displays the key bindings available for each prefix, making it easier to remember and see what remains unbound.

#+begin_src emacs-lisp
  (use-package which-key
  :init
  (which-key-mode))
#+end_src

* Completion Stack
** Overview
Within Emacs, you will want a good system for autocompletion so that you can search for what you need faster.

Popular stacks are *Ivy + Counsel + Swiper* and *Vertico + Consult + Orderless + Embark + Marginalia + Corfu*.

*** Older versions
*ido* - the built in package ("interactive do").

*Helm* - older framework for completions and narrowing selections, although still widely used.

*** Ivy + Counsel + Swiper
*Ivy* - this is a more efficient and user-friendly completion system. It displays options in a vertical list and narrows them down as you type.

*Counsel* - this allows you to run common Emacs commands through the Ivy completion / narrowing system. For example, M-x. Counsel creates a bunch of commands like counsel-M-x which replaces the default M-x.

*Swiper* - this is a search tool that integrates with Ivy. When you search for a text string in a buffer using Swiper, it uses Ivy to display the search results.

*** Vertico + Consult + Orderless + Embark + Marginalia (+ Corfu)
*Vertico* - A lightweight and efficient alternative to Ivy. Unlike Helm and Ivy, it plugs in directly to Emacs' own completion engine instead of having its own layer on top, so all existing completion commands in Emacs use Vertico's UI.

*Consult* - Adds further functionality to the completion engine - e.g. ripgrep.

*Orderless* - allows you to match out of order. Supports strings, regex, initialism, literal matches etc. E.g. "name buffer" will match "buffer-name".

*Embark* - allows you to carry out context-dependent actions on targets. This could be results in the minibuffer, or something in a file. E.g. open a URL in the browser.

*Marginalia* - adds extra information in the minibuffer when you are searching (e.g. for find file, you can see the file permissions, creator, date).

*Corfu* - brings completion engine inline, with a small popup.

** Vertico Stack

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init (vertico-mode))

  (use-package consult)

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))))) ; recommended settings

  (use-package marginalia
    ; :bind (:map minibuffer-local-map ("M-A" . marginalia-cycle)) ; allows you to cycle it on or off
    :init (marginalia-mode))
#+end_src

* Org
** Org Mode
Org Mode is built in. Here are some basic improvements and fixes.

1. Org Mode is the default in scratch.
2. Hide the leading * in bullets.
3. Virtually indent text under subheadings, to make it visually clearer. This also, by default, hides the leading * in bullets.
4. Change the "..." at the end of headings to a downwards arrow.
5. Hide emphasis markers with bold, italics, underline etc.
6. org-cycle-separator-lines maintains visible empty lines when opening and closing headings. By default the value is 2, meaning at least two empty lines are needed after the end of a heading for it to be visible when folded. Changing this to 1 makes it easier to manage.
7. When using M-RET to create a new heading, by default it splits the heading text. This overrides so it just creates a new heading.
8. Setting a maximum character count for when org-clock puts the current task on the modeline.
9. Set the org-agenda files list (from local.el)
10. Set org archive file location ("archive.org") (TODO)
11. Log when todo items are marked as done.

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq initial-major-mode 'org-mode)
    (setq org-hide-leading-stars t)
    (setq org-startup-indented t)
    (setq org-ellipsis " ▾") 
    (setq org-hide-emphasis-markers t)
    (setq org-cycle-separator-lines 1)
    (setq org-M-RET-may-split-line nil)
    (setq org-clock-string-limit 50)
    (setq org-agenda-files sb-org-agenda-files)
    ;(setq org-archive-location sb-org-archive-file)
    (setq org-log-done 'time)
   )
#+end_src

** Bulletpoints
This substitutes the "-" in org mode lists for a dot character, so they look more like bulletpoints.

#+begin_src emacs-lisp 
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region   (match-beginning 1) (match-end 1) "•"))))))

#+end_src

** Org Agenda
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-deadline-warning-days 4)
  ;(setq org-agenda-span 7)
  (setq org-agenda-start-on-weekday nil)

  ; More concise "scheduled" and "deadline" descriptors in org-agenda
  (setq org-agenda-scheduled-leaders '("s: " "s.%dx: "))
  (setq org-agenda-deadline-leaders '("d: " "%3dd: " "%2dd ago: "))

  ; Add new line between each date line
  (setq org-agenda-format-date
          (lambda (date)
            (concat "\n" (org-agenda-format-date-aligned date))))
#+end_src

** Org Roam
Default configuration for org-roam.

*UI*
To install org-roam-ui and have a look at visualisations, use M-x package-install org-roam-ui. It is alpha software and quite resource intensive on startup, so only starting it manually on occasion.

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory sb-org-roam-directory)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+bibliography: Roam.bib\n")
      :unnarrowed t)))
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ;("C-c n g" . org-roam-graph)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n c" . org-roam-capture)
     ("C-c n r" . (lambda() (interactive)(find-file sb-org-roam-rootfile))))
    )
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)

#+end_src

** Org Tidy
This hides the PROPERTY drawers, which can clutter a doc.

#+begin_src emacs-lisp
  (use-package org-tidy
    :config
   (add-hook 'org-mode-hook #'org-tidy-mode)
  )
#+end_src

* LLM
** GPTel
Using gptel as the LLM client.

#+begin_src emacs-lisp
  (use-package gptel
    :config
    (setq gptel-api-key sb-chatgpt-api-key)
    )
#+end_src

* Functions
** Remove EOL chars
This removes end of line characters (e.g. ^M) that have been pasted into an Emacs buffer.
#+begin_src emacs-lisp
  (defun remove-eol-chars ()
    (interactive)
    (goto-char (point-min))
    (while (search-forward "\r" nil t)
      (replace-match "")))
#+end_src

* Main Keyboard Shortcuts
** C-c a -> Org Agenda
[[*Org Agenda][Jump to Org Agenda]]
** C-c z,x -> LLM
#+begin_src emacs-lisp
  (bind-key "C-c z" 'gptel-send)

  (defvar sb-llm (make-sparse-keymap) "sb LLM")
  (bind-key "C-c x" sb-llm)
  (bind-key "z" 'gptel-menu sb-llm)
#+end_src
** C-c c -> Select Action
#+begin_src emacs-lisp
  (defvar sb-actions (make-sparse-keymap) "sb Actions")
  (bind-key "C-c c" sb-actions)
  (bind-key "i" 'org-indent-block sb-actions)
  (bind-key "m" 'remove-eol-chars sb-actions)

  (which-key-add-key-based-replacements
    "C-c c" "sb actions"
    ) 
#+end_src
** C-c v -> Modify View

#+begin_src emacs-lisp
  (defvar sb-views (make-sparse-keymap) "sb Views")
  (bind-key "C-c v" sb-views)
  (bind-key "t" 'org-tidy-toggle sb-views)

  (which-key-add-key-based-replacements
    "C-c v" "sb views"
  )
#+end_src
** C-c b -> Bookmarks

#+begin_src emacs-lisp
  (defvar sb-bookmarks (make-sparse-keymap) "sb Bookmarks")
  (bind-key "C-c b" sb-bookmarks)
  (bind-key "c" (lambda () (interactive) (find-file "~/.emacs.d/config.org")) sb-bookmarks)
  (bind-key "h" (lambda () (interactive) (find-file "~/sb/Org/homebox.org")) sb-bookmarks)
  (which-key-add-key-based-replacements
    "C-c b" "sb bookmarks"
    "C-c b c" "config.org"
    "C-c b h" "homebox.org"
    )
#+end_src
** C-c n -> Notes (org-roam)
[[*Org Roam][Jump to Org Roam]]
